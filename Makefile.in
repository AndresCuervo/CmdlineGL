.PHONY: all build ShellBindings

CC = @CC@
CFLAGS = -I. @CFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
INSTALL = @INSTALL@
prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = $(exec_prefix)/bin
libdir = $(prefix)/lib
infodir = $(prefix)/info

DEF_CC_CMD=${CC} ${CFLAGS} ${CPPFLAGS} `sdl-config --cflags`

INSTALL_SHELL_BINDINGS=@INST_SHELL_BIND@

ALL_HEADERS=*.h
OBJ_FILES=SymbolHash.o Server.o ProcessInput.o ParseGL.o Global.o Contained_RBTree.o IntConstHash.autogen.o CmdHash.autogen.o HashFunc.o ImageLoader.o Font.o Version.o

all: build

build: output/CmdlineGL

output/CmdlineGL: ${OBJ_FILES}
	@if [ ! -d output ]; then mkdir output; fi
	$(CC) $(CFLAGS) -o output/CmdlineGL $(OBJ_FILES) $(LDFLAGS) `sdl-config --libs` $(LIBS)
# I now strip the thing by default.  It knocks off about 350K on my system, lol.  Yay for staticly-compiled hash tables.
	strip output/CmdlineGL
# subsequent builds are tagged by the number of times they have been built in that source dir
	@echo "* Incrementing build number for next build"
	@bash -c 'read major minor release build reponame < Version.string; \
	   let build=build+1; \
	   echo "$$major $$minor $$release $$build $$reponame" > Version.string; \
	 '

Server.o: Server.c Server.h Global.h Version.h
	${DEF_CC_CMD} -c Server.c

ParseGL.o: ParseGL.c ParseGL.h Global.h
	${DEF_CC_CMD} -c ParseGL.c

Font.o: Font.c Font.h Global.h
	$(DEF_CC_CMD) -c Font.c

ImageLoader.o: ImageLoader.h ImageLoader.c ParseGL.h Global.h
	${DEF_CC_CMD} -c ImageLoader.c

Version.o: Version.autogen.c
	${DEF_CC_CMD} -c Version.autogen.c -o Version.o

Version.string: Version.log
	@echo "-> Regenerating Version.string from Version.log"
	@tail -n 1 Version.log | sed -n 's/\(^[^:]*\).*/\1/p' | bash -c ' \
	   read major minor release; \
	   let major=major+0 minor=minor+0 release=release+0; \
	   if [ -f _darcs/RepoName ]; then cur_repo="$$(cat _darcs/RepoName)"; else cur_repo="$$(hostname)"; fi; \
	   echo $$major $$minor $$release 0 $$cur_repo > Version.string; \
	 '

Version.autogen.c: Version.string
	@echo "-> Regenerating Version.c from Version.string"
	@( read major minor release build reponame < Version.string; \
	   echo "const int CGLVER_Major=$$major;"; \
	   echo "const int CGLVER_Minor=$$minor;"; \
	   echo "const int CGLVER_Release=$$release;"; \
	   echo "const int CGLVER_Build=$$build;"; \
	   echo "const char* CGLVER_RepoName=\"$$reponame\";"; \
	   echo "const char* CGLVER_String=\"$$major.$$minor.$$release.$$reponame[$$build]\";"; \
	 ) > Version.autogen.c

Global.o: Global.c Global.h
	${DEF_CC_CMD} -c Global.c

ProcessInput.o: ProcessInput.c ProcessInput.h ParseGL.h Global.h
	${DEF_CC_CMD} -c ProcessInput.c

HashFunc.o: HashFunc.c Global.h
	${DEF_CC_CMD} -c -O4 HashFunc.c

SymbolHash.o: SymbolHash.h SymbolHash.c Global.h
	${DEF_CC_CMD} -c SymbolHash.c

Contained_RBTree.o: Contained_RBTree.c Contained_RBTree.h Global.h
	${DEF_CC_CMD} -c Contained_RBTree.c

IntConstHash.autogen.o: IntConstHash.autogen.c Global.h
	${DEF_CC_CMD} -c IntConstHash.autogen.c

IntConstHash.autogen.c: HashTableGenUtil ConstList.txt Makefile ${ALL_HEADERS}
	@echo "-> Regenerating IntConstHash.autogen.c from the names in ConstList.txt"
	@( echo "// This code automatically generated by makefile, from contents of ConstList.txt";\
	   echo "#include \"Global.h\"";\
	   echo "#include \"GlHeaders.h\"";\
	   echo "#include \"SymbolHash.h\"";\
	   for hFile in `grep -l "#define CGL_" ${ALL_HEADERS}`; do \
		 echo "#include \"$$hFile\"";\
	   done;\
	   ( cat ConstList.txt;\
		 grep -h "#define CGL_" ${ALL_HEADERS} | sed 's/#define \(CGL_[^ ]*\).*/\1/'; \
	   ) | sed 's/\(.*\)/\1 (int)(\1)/' \
		| ./HashTableGenUtil 1024 IntConstLookup IB IntConstHashEntry;\
	 ) >IntConstHash.autogen.c

CmdHash.autogen.o: CmdHash.autogen.c Global.h
	${DEF_CC_CMD} -c CmdHash.autogen.c

CmdHash.autogen.c: HashTableGenUtil Makefile ${ALL_HEADERS}
	@echo "-> Regenerating CmdHash.autogen.c from the \"PUBLISHED\" functions in *.h"
	@( echo "// This code automatically generated by makefile.  Do not modify.";\
	   echo "#include \"Global.h\"";\
	   for hFile in `grep -l PUBLISHED ${ALL_HEADERS}`; do \
		 echo "#include \"$$hFile\"";\
	   done;\
	   sed -n '/^PUBLISHED(\([^,]*\),\([^)]*\)).*/s//\1 \2/p' *.h \
 	    | ./HashTableGenUtil 64 CmdLookup CB CmdHashEntry;\
	 ) >CmdHash.autogen.c

HashTableGenUtil: HashTableGenUtil.c HashFunc.c
	${DEF_CC_CMD} -o HashTableGenUtil HashTableGenUtil.c 

ConstList.txt:
	@echo "-> Attempting to get the useful #define'd constants from your GL headers..."
	@cat ConstList.works_on_my_box\
	 | bash -c '\
		echo "#include <@gl_header@>";\
		echo "#include <@glu_header@>";\
		while read ConstName;\
			do echo "#ifdef $$ConstName";\
			echo "validconst $${ConstName:2}";\
			echo "#endif";\
		done\
	   '\
	 | cpp ${CFLAGS} ${CPPFLAGS} `sdl-config --cflags` | grep validconst\
	 | sed -e 's/[^ ]* \(.*\)$$/GL\1/' > ConstList.txt
	@echo
	@echo "  ConstList.txt has been generated by taking my own machine's valid list of #defines"
	@echo "  and running it through your preprocessor.  This is rather an extreme hack in the"
	@echo "  name of automatic compatibility.  Hopefully it works for you."
	@echo "  If not, try grepping your GL header files for #define GL*, and put the name of every"
	@echo "  constant you'd like to have at runtime into the ConstList.txt file."
	@echo "  Note that CmdlineGL can only use integer constants, and not all GL_* are."
	@echo "  Also beware: 'make clean' will remove it!"
	@echo

install: output/CmdlineGL
	if [ ! -d @bindir@ ]; then install -d @bindir@; fi
	
	install output/CmdlineGL @bindir@
	@if [ -n "${INSTALL_SHELL_BINDINGS}" ]; then \
		echo "-> Making all the symlinks from the CmdlineGLClient script to the command names in bin" \
		&& echo install CmdlineGLClient @bindir@ \
		&& install CmdlineGLClient @bindir@ \
		&& sed -n '/^PUBLISHED(\([^,]*\),.*/s//\1/p' *.h \
		 | while read fn; do \
		 	echo "ln -sf CmdlineGLClient @bindir@/$$fn";\
		 	ln -s CmdlineGLClient @bindir@/$$fn;\
 		   done \
	fi

dist: Version.string output/CmdlineGL
	@echo "==>> Make sure to update the Version.log to increment the release number! <<=="
	@( read major minor release andstuff < Version.string; \
	   DistName="CmdlineGL_$$major.$$minor.$$release"; \
	   echo "Generating dist tarball using 'darcs dist'"; \
	   darcs dist -d "$$DistName"; \
	   echo "Refreshing configure script"; \
	   autoconf; \
	   echo "Adding 'configure' script to tarball"; \
	   [[ -d "$$DistName" ]] || mkdir "$$DistName"; \
	   cp configure "$$DistName/configure"; \
	   gunzip "$$DistName.tar.gz"; \
	   tar -rf "$$DistName.tar" "$$DistName/configure"; \
	   gzip "$$DistName.tar"; \
	   rm "$$DistName/configure"; \
	   rmdir "$$DistName"; \
	   echo "Release tarball is $$DistName.tar.gz"; \
	)

clean:
	rm -f *.autogen.c
	rm -f *.o
	rm -f ConstList.txt
	rm -rf output/
	rm -f HashTableGenUtil
